* Ace-Window
Package to go to any window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    ("C-x o" . ace-window))
#+end_src
* Avy
Great package to quickly find and jump on a character.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* C++
** C++ template
Add a default template to each C++ file.
#+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hooks 'maybe-load-template)
  (defun maybe-load-template ()
    (interactive)
    (when (and 
	   (string-match "\\.cpp$" (buffer-file-name))
	   (eq 1 (point-max)))
      (insert-file "~/.templates/base.cpp")))
#+END_SRC
** C++ compile and run
Compile and run a C++ file by pressing f5.
#+BEGIN_SRC emacs-lisp
  (defun compile-and-run()
      (interactive)
      (save-buffer)
      (compile (concat "g++ "  (file-name-nondirectory (buffer-file-name)) " -o " (file-name-sans-extension   (file-name-nondirectory (buffer-file-name))) " && ./" (file-name-sans-extension  (file-name-nondirectory (buffer-file-name)))) t )
      (other-window 1)
      (end-of-buffer)
    )
    (with-eval-after-load "cc-mode" (define-key c++-mode-map [f5] 'compile-and-run))
#+END_SRC
* Electric braces
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  (electric-pair-mode t)
#+END_SRC
* Emacs config edit/reload
** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Ivy
#+begin_src emacs-lisp
    (use-package counsel
      :ensure t
      :config
      (ivy-mode 1)   ; enable ivy everywhere
      ;(setq ivy-use-virtual-buffers t) 
      (setq ivy-count-format "(%d/%d) ")
      ;Ivy-based interface to standard commands
      (global-set-key (kbd "C-s") 'swiper-isearch)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "M-y") 'counsel-yank-pop)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "<f2> j") 'counsel-set-variable)
      (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
      (global-set-key (kbd "C-c p v") 'ivy-push-view)
      ;(global-set-key (kbd "C-c V") 'ivy-pop-view)
      (global-set-key (kbd "C-c s v") 'ivy-switch-view)
      ;Ivy-based interface to shell and system tools
      ;(global-set-key (kbd "C-c c") 'counsel-compile)
      ;(global-set-key (kbd "C-c g") 'counsel-git)
      ;(global-set-key (kbd "C-c j") 'counsel-git-grep)
      ;(global-set-key (kbd "C-c L") 'counsel-git-log)
      ;(global-set-key (kbd "C-c k") 'counsel-rg)
      ;(global-set-key (kbd "C-c m") 'counsel-linux-app)
      (global-set-key (kbd "C-c f") 'counsel-fzf)
      ;(global-set-key (kbd "C-x l") 'counsel-locate)
      ;(global-set-key (kbd "C-c J") 'counsel-file-jump)
      ;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      ;(global-set-key (kbd "C-c w") 'counsel-wmctrl)
      ;Ivy-resume and other commands
      ;(global-set-key (kbd "C-c C-r") 'ivy-resume)
      ;(global-set-key (kbd "C-c b") 'counsel-bookmark)
      ;(global-set-key (kbd "C-c d") 'counsel-descbinds)
      ;(global-set-key (kbd "C-c g") 'counsel-git)
      ;(global-set-key (kbd "C-c o") 'counsel-outline)
      ;(global-set-key (kbd "C-c t") 'counsel-load-theme)
      ;(global-set-key (kbd "C-c F") 'counsel-org-file)
      )
#+end_src
* Magit
Git wrapper for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC 
* Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
   ;;   (setq spaceline-line-column-p nil)
   ;;   (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC
* Neotree
Sidebar navigation for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind
    ([f8] . neotree-toggle))
#+END_SRC
* Org-Mode
** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Org QOL
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
  (setq org-log-done 'time)
  (setq org-todo-keywords '((sequence "NOT STARTED(t)" "IN PROGESS(p)" "|" "COMPLETED(d)")))
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Org Code Snippets
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src
** QOL Changes
These are some QOL changes which make Emacs a much better experience.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil) ;;  Don't save backup files
  (setq auto-save-default nil) ;;  Don't auto-save files
  (setq scroll-conservatively 100) ;;  Scroll conservatively
  (setq-default cursor-type 'bar)  ;; Set cursor as bar
  (when window-system (global-hl-line-mode t)) ;;  Highlight line where cursor is present
  ;;(when window-system (global-prettify-symbols-mode t)) ;;  Pretty Symbols
  (tool-bar-mode -1) ;; Remove tool bar
  (menu-bar-mode -1) ;; Remove menu bar
  (scroll-bar-mode -1) ;; Remove scroll bar
  (setq ring-bell-function 'ignore) ;; Remove annoying bell sound
  (show-paren-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-startup-message t)
  ;;set tab width as 2, replace tab with space
  (setq-default tab-width 4)
#+END_SRC

** Org-Blogging
Custom function to create a new org file for publishing on my Jekyll blog.
#+begin_src emacs-lisp
  (defun create-org-file (title)
    (interactive "sEnter title for post: ")
    (find-file (concat "~/Notes/" 
    (shell-command-to-string "echo -n $(date +%Y-%m-%d-)") title ".org"))
    )

  (global-set-key (kbd "<f6>") 'create-org-file)
#+end_src
Function to convert org-mode file to markdown file
#+begin_src emacs-lisp
    (defun publish-to-blog()
      (interactive)
      (save-buffer)
      (org-md-export-to-markdown)
      (shell-command (concat "echo -e '---\n---\n' | cat - " (file-name-base (buffer-file-name)) ".md > temp && mv temp " (file-name-base (buffer-file-name)) ".md"))
      (shell-command (concat "mv " (file-name-base (buffer-file-name)) ".md" " ~/Github/parimal7.github.io/_posts/"))
      (shell-command (concat "cd ~/Github/parimal7.github.io/_posts/ && git add . && git commit -m 'Added file " (file-name-base (buffer-file-name)) ".md' && git push"))
      )

  (global-set-key (kbd "<f7>") 'publish-to-blog)
#+end_src
** Org-default
#+begin_src emacs-lisp
  ;(add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;(setq org-agenda-span 'day)
  ;(setq initial-buffer-choice "~/Github/org-mode/agenda-files/agenda.org")

 ; (defun my-init-hook ()
  ;  (split-window-right)
   ; (let ((org-agenda-window-setup 'other-window))
    ;  (org-agenda nil "a")))

  ;(add-hook 'window-setup-hook #'my-init-hook)
#+end_src
** Org-Archive
Archive all done tasks
#+begin_src emacs-lisp
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'agenda))
#+end_src
* Popup kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
  (setq kill-ring-max 100)
#+END_SRC
* Programming
** Enable relative line numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
      ("C-c C-r" . sudo-edit))
#+END_SRC
* Super-save
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window)

  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
#+end_src
* Text Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Vterm
The best terminal emulator for Emacs
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    )
  (defun run-vterm ()
    (interactive)
    (require 'vterm)
    (command-execute 'vterm)
    (setq-default truncate-lines nil)
    (if (not (boundp 'term-number))
        (defvar term-number 1 "term index in the current emacs session"))
    (rename-buffer (concat "vterm<" (int-to-string term-number) ">"))
    (setq term-number (+ 1 term-number))
    )
  (global-set-key (kbd "<s-SPC>") 'run-vterm)
#+end_src
* Which-Key
which-key is a minor mode for Emacs that displays the key bindings following 
your currently entered incomplete command (a prefix) in a popup
#+BEGIN_SRC emacs-lisp
   (use-package which-key
      :ensure t
      :init (which-key-mode)
      )
#+END_SRC
* Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
        :ensure t
        :init
        (yas-global-mode 1))
#+end_src

* QOL Changes
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src
* Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t

    :init
    (setq org-roam-v2-ack t)

    ;:hook
    ;(after-init . org-roam-mode)

    :custom
    (org-roam-directory "~/Github/org-roam-notes/")
    (org-roam-dailies-directory "Journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :if-new (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))))

    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n t" . org-roam-dailies-goto-today)
           ("C-c n p" . org-roam-dailies-goto-previous-note)
           ("C-c n n" . org-roam-dailies-goto-next-note)		
           ("C-c n d" . org-roam-dailies-goto-date))

    :config
    (org-roam-setup))
#+end_src
