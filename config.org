* Which-Key
which-key is a minor mode for Emacs that displays the key bindings following 
your currently entered incomplete command (a prefix) in a popup
#+BEGIN_SRC emacs-lisp
   (use-package which-key
      :ensure t
      :init (which-key-mode)
      )
#+END_SRC
* Org-Mode
** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Org QOL
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
  (setq org-log-done 'time)
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-ellipsis "â®·")
#+END_SRC
* QOL Changes
These are some QOL changes which make Emacs a much better experience.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil) ;;  Don't save backup files
  (setq auto-save-default nil) ;;  Don't auto-save files
  (setq scroll-conservatively 100) ;;  Scroll conservatively
  (when window-system (global-hl-line-mode t)) ;;  Highlight line where cursor is present
  ;;(when window-system (global-prettify-symbols-mode t)) ;;  Pretty Symbols
  (tool-bar-mode -1) ;; Remove tool bar
  (menu-bar-mode -1) ;; Remove menu bar
  (scroll-bar-mode -1) ;; Remove scroll bar
  (setq ring-bell-function 'ignore) ;; Remove annoying bell sound
  (show-paren-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-startup-message t)
#+END_SRC

* Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
      ("s-e" . sudo-edit))
#+END_SRC
* Avy
Great package to quickly find and jump on a character.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Ace-Window
Package to go to any window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind
    ("C-x o" . ace-window))
#+end_src
* Emacs config edit/reload
** Edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Magit
Git wrapper for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC 
* Neotree
Sidebar navigation for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind
    ([f8] . neotree-toggle))
#+END_SRC
* C++
** C++ template
Add a default template to each C++ file.
#+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hooks 'maybe-load-template)
  (defun maybe-load-template ()
    (interactive)
    (when (and 
	   (string-match "\\.cpp$" (buffer-file-name))
	   (eq 1 (point-max)))
      (insert-file "~/.templates/base.cpp")))
#+END_SRC
** C++ compile and run
Compile and run a C++ file by pressing f5.
#+BEGIN_SRC emacs-lisp
  (defun compile-and-run()
      (interactive)
      (save-buffer)
      (compile (concat "g++ "  (file-name-nondirectory (buffer-file-name)) " -o " (file-name-sans-extension   (file-name-nondirectory (buffer-file-name))) " && ./" (file-name-sans-extension  (file-name-nondirectory (buffer-file-name)))) t )
      (other-window 1)
      (end-of-buffer)
    )
    (with-eval-after-load "cc-mode" (define-key c++-mode-map [f5] 'compile-and-run))
#+END_SRC
* Electric braces
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  (electric-pair-mode t)
#+END_SRC
* Modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
   ;;   (setq spaceline-line-column-p nil)
   ;;   (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC
* Popup kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
  (setq kill-ring-max 100)
#+END_SRC
* Terminal
** Default shell should be bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Easy to remember key binding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-SPC>") 'ansi-term)
#+END_SRC
* Programming
** Enable relative line numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* Text Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
        :ensure t
        :init
        (yas-global-mode 1))
#+end_src
* Org-Blogging
Custom function to create a new org file for publishing on my Jekyll blog.
#+begin_src emacs-lisp
  (defun create-org-file (title)
    (interactive "sEnter title for post: ")
    (find-file (concat "~/" 
    (shell-command-to-string "echo -n $(date +%Y-%m-%d-)") title ".org"))
    )

  (global-set-key (kbd "<f6>") 'create-org-file)
#+end_src
Function to convert org-mode file to markdown file
#+begin_src emacs-lisp
    (defun publish-to-blog()
      (interactive)
      (save-buffer)
      (org-md-export-to-markdown)
      (shell-command (concat "echo -e '---\n---\n' | cat - " (file-name-base (buffer-file-name)) ".md > temp && mv temp " (file-name-base (buffer-file-name)) ".md"))
      (shell-command (concat "mv " (file-name-base (buffer-file-name)) ".md" " ~/Github/parimal7.github.io/_posts/"))
      (shell-command (concat "cd ~/Github/parimal7.github.io/_posts/ && git add . && git commit -m 'Added file " (file-name-base (buffer-file-name)) ".md' && git push"))
      )

  (global-set-key (kbd "<f7>") 'publish-to-blog)
#+end_src
* Org-default
#+begin_src emacs-lisp
  ;(add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;(setq org-agenda-span 'day)
  ;(setq initial-buffer-choice "~/Github/org-mode/agenda-files/agenda.org")

 ; (defun my-init-hook ()
  ;  (split-window-right)
   ; (let ((org-agenda-window-setup 'other-window))
    ;  (org-agenda nil "a")))

  ;(add-hook 'window-setup-hook #'my-init-hook)
#+end_src
* Org-Archive
Archive all done tasks
#+begin_src emacs-lisp
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'agenda))
#+end_src
* Programming
#+begin_src emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+end_src
* Ido
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (setq ido-vertical-show-count t)
#+end_src
